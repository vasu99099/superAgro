generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("DATABASE_URL_SHADOW")  
}

enum ImageStatus {
  PENDING
  CONFIRMED
  DELETED
}

enum PackingUnit {
  mg
  g
  kg
  ml
  l
}

model User {
  user_id        Int        @id @default(autoincrement())
  username       String     @unique
  password       String
  firstname      String
  lastname       String
  email          String     @unique
  profile_image  String?
  contact_number String
  role           Role       @relation(fields: [role_id], references: [role_id])
  role_id        Int
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  Product        Product[]
  Category       Category[]
  Customer       Customer[]
}

model Role {
  role_id Int    @id @default(autoincrement())
  name    String @unique
  users   User[]
}

model TempImage {
  id        Int         @id @default(autoincrement())
  user_id   Int?
  image_key String      @unique
  status    ImageStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  user_id     Int
  user        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  category    Product[]

  @@unique([name, user_id])
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  state     String?
  country   String?
  villages  Village[]
}

model Village {
  id         Int    @id @default(autoincrement())
  city_id    Int
  name       String
  latitude   Float
  longitude  Float
  population Int?
  area_sq_km Float?

  city     City       @relation(fields: [city_id], references: [id])
  Customer Customer[]
  farms    farms[]
}

model Customer {
  customer_id     Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  address         String?  @db.Text
  user_id         Int
  user            User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  village_id      Int
  village         Village  @relation(fields: [village_id], references: [id])
  phone           String   @unique @db.VarChar(20)
  whatsapp_number String?  @db.VarChar(20)
  email           String?  @db.VarChar(255)
  farms           farms[]
  created_at      DateTime @default(now()) @map("created_at")
  updated_at      DateTime @updatedAt @map("updated_at")
  Dosage          Dosage[]

  @@unique([user_id, phone])
}

model farms {
  farm_id     Int      @id @default(autoincrement())
  farm_name   String   @db.VarChar(255)
  customer_id Int
  customer    Customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  village_id  Int
  village     Village  @relation(fields: [village_id], references: [id])
  longitude   Decimal? @db.Decimal(10, 7)
  latitude    Decimal? @db.Decimal(10, 7)
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")
  Dosage      Dosage[]
}

model Product {
  product_id         Int                  @id @default(autoincrement())
  userId             Int
  user               User                 @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  name               String               @db.VarChar(255)
  hsc_code           String?              @db.VarChar(50)
  content_technical  String?              @db.Text
  categoryId         Int
  category           Category             @relation(fields: [categoryId], references: [category_id])
  ProductPackaging   ProductPackaging[]
  ProductImage       ProductImage[]
  SuggestedPesticide SuggestedPesticide[]
}

model ProductPackaging {
  id            Int         @id @default(autoincrement())
  product       Product     @relation(fields: [productId], references: [product_id], onDelete: Cascade)
  productId     Int
  packSize      Float
  packagingType PackingUnit
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [product_id], onDelete: Cascade)
  url       String   @db.VarChar(500)
  altText   String?  @db.VarChar(255)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Dosage {
  dosage_id   Int                  @id @default(autoincrement())
  farm_id     Int
  customer_id Int
  isClosed    Boolean              @default(false)
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  farm        farms                @relation(fields: [farm_id], references: [farm_id], onDelete: Cascade)
  Customer    Customer             @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  suggestions SuggestedPesticide[]
}

model SuggestedPesticide {
  suggested_id Int     @id @default(autoincrement())
  product_id   Int
  note         String?
  dosage_id    Int
  dosage       Dosage  @relation(fields: [dosage_id], references: [dosage_id], onDelete: Cascade)
  product      Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}
